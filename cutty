#!/usr/bin/env bash

DEVICE_PATH=storage/self/primary/Android/data/am.benth.pecopeco/files/PecoPeco
STAGE=stage
STAGED_CUTS=$STAGE/cuts
SHARED=shared
SHARED_CUTS=$SHARED/cuts
DIR_TO_STAGE=(cuts slicer-timer)

KEEPDB=$STAGED_CUTS/keep.txt

usage() {
  name=$(basename $0)
  echo "usage : ${name} [clean|export|remove|list|push|pull] [arg]"
  echo "        ${name} clean : remove from headset any cut not listed in $KEEPDB"
  echo "        ${name} list [directory]: list all cuts in directory (defaults : $STAGED_CUTS)"
  echo "        ${name} push : upload stage to headset"
  echo "        ${name} pull : download stage from headset"
  echo "        ${name} lookup <cutid> : find a cut file given the first character of it's id"
  echo "        ${name} set <value> <name> <cutid>"
}

if [[ ! -f $KEEPDB ]] ; then
  mkdir -p $(dirname $KEEPDB)
  touch $KEEPDB
fi

pull() {
  for dir in cuts slicer-templates ; do
    adb pull $DEVICE_PATH/$dir $STAGE
  done
}

push() {
  for dir in cuts slicer-templates ; do
    adb shell rm -r $DEVICE_PATH/$dir/*
    adb push $STAGE/$dir $DEVICE_PATH/
  done
}

set_property() {
  name=$1
  value=$2
  prefix=$3
  tmp=$(mktemp)
  files=$(_lookup $prefix)
  for file in $files ; do
    jq -r --arg prefix $prefix --arg name "$name" --arg value "$value" '.[$name] ="\($value)"' $file > $tmp && mv $tmp $file

    if [[ "$name" != id ]] ; then
      return
    fi
    dstfile="$(dirname $file)/${value}.json"
    mv $file $dstfile
    actionbefore=$(_whatshallIdowith $file)
    actionafter=$(_whatshallIdowith $dstfile)
    if [[ $actionbefore != $actionafter ]] ; then
      echo "Warning : we used to $actionbefore this cut, and now we will $actionafter it"
    fi
  done
}


clean() {
  if [[ ! -f $KEEPDB ]] ; then
    echo "List every cuts you want to keep in file '$KEEPDB'"
    exit -1
  fi
  echo "$(ls $STAGED_CUTS/*.json | wc -l) cuts found"
  for file in $(ls $STAGED_CUTS/*.json) ; do
    if [[ "$(_whatshallIdowith $file)" == "drop" ]] ; then
      echo "Dropping $file …"
      rm $file
    fi
  done
  echo "$(ls $STAGED_CUTS/*.json | wc -l) cuts left"
}

_format_cell() {
  value=$1
  width=$2
  value=$(echo $value | sed -e 's/^"//; s/"$//')
  if [[ "$value" == "null" ]] ; then
    value=""
  fi
  if [[ "${#value}" -gt $width ]]; then
    value="${value::$width-1}…"
  fi
  printf "%-${width}s" "$value"
}

_all_cut_ids() {
  files=$(compgen -G "$STAGED_CUTS/*.json" ; compgen -G "$SHARED_CUTS/*.json" )
  jq -s '.[].id' $files | sed 's/"//g' | sort | uniq
}

_lookup() {
  prefix=$1
  if [[ -f $1 ]] ; then
    prefix=$(jq '.id' $1 | sed 's/"//g' )
  fi
  cutsfile=$(mktemp)
  idsfile=$(mktemp)
  cuts=$(compgen -G "$STAGED_CUTS/*.json" ; compgen -G "$SHARED_CUTS/*.json")
  [[ -z "$cuts" && return ]]
  jq -s '.[].id' $cuts | sed 's/"//g' > $idsfile
  echo $cuts | tr " " "\n" > $cutsfile
  paste -d : $idsfile $cutsfile | grep "^$prefix" | cut -d : -f 2
}

_whatshallIdowith() {
  file=$1
  if [[ -f $file ]] ; then
    id=$(jq '.id' $file | sed 's/"//g' )
  else
    id=$(basename $file .json)
  fi
  for prefix in $(cat $KEEPDB | cut -d\  -f 1) ; do
    if [[ $id =~ ^${prefix} ]] ; then
      echo keep
      return
    fi
  done
  echo drop
}

_checkNumberOfArgs() {
  target=$1
  if [[ $(($#-2)) -lt $target ]] ; then
    echo "Not enough arguments"
    usage
    exit -1
  fi
}

list() {
  dir=$1
  for id in $(_all_cut_ids)
  do
    files=$(_lookup $id)
    file=$(echo $files | cut -d\  -f 1)
    if [[ -n "$dir" && ! $files =~ "$dir" ]] ; then
      continue
    fi
    if [[ "$files" =~ "$STAGE" ]] ; then flags="s" ; else flags="." ; fi
    if [[ $(_whatshallIdowith $file) == keep ]] ; then flags="${flags}k" ; else flags="${flags}d" ; fi
    if [[ "$files" =~ "$SHARED_CUTS" ]] ; then flags="${flags}s" ; else flags="${flags}." ; fi
    shortid=$(_format_cell "$(jq .id $file)" 10)
    model=$(_format_cell "$(jq .modelId $file)" 25)
    name=$(_format_cell "$(jq .name $file)" 40)
    author=$(_format_cell "$(jq .author $file)" 10)
    pieces=$(_format_cell "$(jq .pieceCount $file)" 3)
    timetosolve=$(_format_cell "$(jq .timeToSolve $file)" 3)
    echo "$shortid ($flags) $model $pieces $author $timetosolve $name"
  done
}

case "$1" in
  pull)
    pull
    ;;
  push)
    push
    ;;
  clean)
    clean
    ;;
  list)
    list $2;
    ;;
  lookup)
    _checkNumberOfArgs 1 $*
    _lookup $2
    ;;
  set)
    _checkNumberOfArgs 3 $*
    set_property $2 "$3" $4
    ;;
  *)
    usage
esac
