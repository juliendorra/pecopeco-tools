#!/usr/bin/env bash

DEVICE_PATH=storage/self/primary/Android/data/am.benth.pecopeco/files/PecoPeco/cuts
SHARE_PATH=cuts
STAGE=stage

KEEPDB=$STAGE/keep.txt

usage() {

  name=$(basename $0)
  echo "usage : ${name} [clean|export|remove] [arg]"
  echo "        ${name} clean : remove from headset any cut not listed in $KEEPDB"
  echo "        ${name} export <cutid> : export cut to $SHARE_PATH"
  echo "        ${name} remove <cutid> : remove cut from headset"
  echo "        ${name} list [directory]: list all cuts in directory (defaults : $SHARE_PATH and $CACHE)"
  echo "        ${name} rename <cutid> \"<Name for the cut\" : rename the cut"
  echo "        ${name} push : upload database to headset "
  echo "        ${name} pull : download database from headset "
}

if [[ ! -f $KEEPDB ]] ; then
  touch $KEEPDB
fi

pull() {
  mkdir -P $STAGE
  adb pull $DEVICE_PATH/ $STAGE/
}

push() {
  adb shell rm -r $DEVICE_PATH/cuts/*
  adb push $STAGE/* $DEVICE_PATH/
}

clean() {
  if [[ ! -f $KEEPDB ]] ; then
    echo "List every cuts you want to keep in file '$KEEPDB'"
    exit -1
  fi
  echo "$(ls $STAGE/*.json | wc -l) cuts found"
  for file in $(ls $STAGE/*.json) ; do
    if [[ "$(_whatshallIdowith $file)" == "drop" ]] ; then
      echo "Dropping $file …"
      rm $file
    fi
  done
  echo "$(ls $STAGE/*.json | wc -l) cuts left"
}

export() {
  prefix=$1
  files=($(adb ls $DEVICE_PATH | grep " $prefix" | cut -d\  -f 4))
  case ${#files[@]} in
    0)
      echo "Found no cut file on headset with a file name starting with $prefix"
      ;;
    1)
      echo "Exporting $files to $SHARE_PATH"
      adb pull $DEVICE_PATH/$files $SHARE_PATH
      return
      ;;
    *)
      echo "Found more than one cuts with a file name starting with $prefix"
  esac
}


_format_cell() {
  value=$1
  width=$2
  value=$(echo $value | sed -e 's/^"//; s/"$//')
  if [[ "$value" == "null" ]] ; then
    value=""
  fi
  if [[ "${#value}" -gt $width ]]; then
    value="${value::$width-1}…"
  fi
  printf "%-${width}s" "$value"
}

_all_cut_ids() {
  files=$(compgen -G "$STAGE/*.json" ; compgen -G "$SHARE_PATH/*.json" )
  jq -s '.[].id' $files | sed 's/"//g' | sort | uniq
}

_lookup() {
  prefix=$1
  cutsfile=$(mktemp)
  idsfile=$(mktemp)
  cuts=$(compgen -G "$STAGE/*.json" ; compgen -G "$SHARE_PATH/*.json")
  [[ -z "$cuts" && return ]]
  jq -s '.[].id' $cuts | sed 's/"//g' > $idsfile
  echo $cuts | sed 's/ /\n/g' > $cutsfile
  paste -d : $idsfile $cutsfile | grep "^$prefix" | cut -d : -f 2
}

_whatshallIdowith() {
  file=$1
  answer=drop
  id=$(jq '.id' $file | sed 's/"//g' )
  for prefix in $(cat $KEEPDB | cut -d\  -f 1) ; do
    if [[ $id =~ ^${prefix} ]] ; then
      answer=keep
    fi
  done
  echo $answer
}

list() {
  dir=$1
  for id in $(_all_cut_ids)
  do
    files=$(_lookup $id)
    file=$(echo $files | cut -d\  -f 1)
    if [[ -n "$dir" && ! $files =~ "$dir" ]] ; then
      continue
    fi
    if [[ "$files" =~ "$STAGE" ]] ; then flags="s" ; else flags="." ; fi
    if [[ $(_whatshallIdowith $file) == keep ]] ; then flags="${flags}k" ; else flags="${flags}d" ; fi
    if [[ "$files" =~ "$SHARE_PATH" ]] ; then flags="${flags}s" ; else flags="${flags}." ; fi
    shortid=$(_format_cell "$(jq .id $file)" 7)
    model=$(_format_cell "$(jq .modelId $file)" 25)
    name=$(_format_cell "$(jq .name $file)" 40)
    echo "$shortid ($flags) $model $author $name $desc"
  done
}

case "$1" in
  pull)
    pull
    ;;
  push)
    push
    ;;
  clean)
    clean
    ;;
  list)
    list $2;
    ;;
  export)
    export $2
    ;;
  remove)
    remove $2
    ;;
  *)
    usage
esac
